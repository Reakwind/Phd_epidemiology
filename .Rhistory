tab2 <- bind_rows(tab_tot, tab_std)
if (!is.null(tab2) && nrow(tab2) > 0) {
cat("### Table 2. Cognitive & Wellbeing — Totals and Standardized by Visit\n")
# Spread to wide so each visit has its own block of columns
tab2_wide <- tab2 |>
mutate(across(c(n, missing), as.character)) |>
pivot_longer(
cols = c(n, missing, `Mean (SD)`, `Median [IQR]`),
names_to = "stat", values_to = "val"
) |>
mutate(col = paste(Visit, stat, sep = " - ")) |>
select(Type, Measure, col, val) |>
pivot_wider(names_from = col, values_from = val) |>
arrange(Type, Measure)
}
# =====================================================================================
# PLOTS — all with explicit n and missing
# =====================================================================================
# --- Demographics missingness (participant-level)
demo_vars <- intersect(c("age","gender","study_group"), names(demo_df))
if (length(demo_vars) > 0) {
miss_df <- demo_df |>
summarize(across(all_of(demo_vars), ~sum(is.na(.)), .names = "miss_{.col}")) |>
pivot_longer(everything(), names_to = "var", values_to = "missing") |>
mutate(variable = sub("^miss_", "", var),
N = N_demo,
pct = 100 * missing / N)
print(
ggplot(miss_df, aes(x = reorder(variable, -pct), y = pct)) +
geom_col() +
geom_text(aes(label = sprintf("%.1f%% (miss=%d of N=%d)", pct, missing, N)), vjust = -0.3) +
labs(title = "Demographics — Percent Missing",
subtitle = paste0("Participant-level (N=", N_demo, ")"),
x = NULL, y = "Percent") +
ylim(0, max(100, max(miss_df$pct, na.rm = TRUE) + 10))
)
}
# --- Age histogram (participant-level)
if ("age" %in% names(demo_df)) {
n_age <- sum(!is.na(demo_df$age))
miss_age <- N_demo - n_age
print(
demo_df |> filter(!is.na(age)) |>
ggplot(aes(age)) + geom_histogram(bins = 15) +
labs(title = "Age distribution",
subtitle = paste0("Participant-level: n=", n_age, ", missing=", miss_age, " (N=", N_demo, ")"),
x = "Age (years)", y = "Count")
)
}
# --- Gender bar (participant-level)
if ("gender" %in% names(demo_df)) {
n_gender <- sum(!is.na(demo_df$gender))
miss_gender <- N_demo - n_gender
print(
demo_df |> filter(!is.na(gender)) |>
ggplot(aes(x = gender)) + geom_bar() +
labs(title = "Gender distribution",
subtitle = paste0("Participant-level: n=", n_gender, ", missing=", miss_gender, " (N=", N_demo, ")"),
x = NULL, y = "Count")
)
}
# --- PHQ-9 & WHO-5 item distributions (row-level; facet labels carry n/missing)
phq9_items <- intersect(c(
"little_interest_or_pleasure_in_doing_things",
"feeling_down_depressed_or_hopeless",
"trouble_falling_or_staying_asleep_or_sleeping_too_much",
"feeling_tired_or_having_little_energy",
"poor_appetite_or_overeating",
"feeling_bad_about_yourself_g_or_that_you_are_a_failure_or_have_let_yourself_or_your_family_down",
"trouble_concentrating_on_things_such_as_reading_the_newspaper_or_watching_television",
"moving_or_speaking_so_slowly_that_other_people_could_have_noticed_or_the_opposite_g_being_so_fidgety_or_restless_that_you_have_been_moving_around_a_lot_more_than_usual",
"thoughts_that_you_would_be_better_off_dead_or_of_hurting_yourself",
"thoughts_that_you_would_be_better_off_dead_or_of_hurting"
), names(df)) |> unique()
phq9_items <- phq9_items[1:min(9, length(phq9_items))]
who5_items <- intersect(c(
"i_have_felt_cheerful_and_in_good_spirits",
"i_have_felt_calm_and_relaxed",
"i_have_felt_active_and_vigorous",
"i_woke_up_feeling_fresh_and_rested",
"my_daily_life_has_been_filled_with_things_that_interest_me"
), names(df))
make_item_plot <- function(items, scale_max, title_prefix) {
if (!length(items)) return(invisible(NULL))
N_rows <- nrow(df)
counts <- tibble(item = items) |>
rowwise() |>
mutate(n = sum(!is.na(df[[item]])),
missing = N_rows - n,
label = paste0(item, "\n(n=", n, ", miss=", missing, " of N=", N_rows, ")")) |>
ungroup()
long <- df |>
select(all_of(items)) |>
pivot_longer(everything(), names_to = "item", values_to = "value") |>
left_join(counts, by = "item")
ggplot(long |> filter(!is.na(value)), aes(x = factor(value))) +
geom_bar() +
facet_wrap(~ label, ncol = 3, scales = "free_y") +
scale_x_discrete(drop = FALSE, limits = as.character(0:scale_max)) +
labs(title = paste0(title_prefix, " item distributions"),
subtitle = "Row-level counts; facet labels show n & missing",
x = "Response", y = "Count")
}
print(make_item_plot(phq9_items, 3, "PHQ-9"))
print(make_item_plot(who5_items, 5, "WHO-5"))
# --- Summary scores by visit (boxplots) with facet labels carrying per-visit n/missing
score_vars <- intersect(c(
"phq9_total_score","who_5_total_score","moca_total_score",
"dsst_total_score","score_sage","pp_dsst_st","vf_phonemic_st","vf_semantic_st"
), names(df))
if (length(score_vars) > 0 && "visit" %in% names(df)) {
N_v1 <- sum(df$visit == 1, na.rm = TRUE)
N_v2 <- sum(df$visit == 2, na.rm = TRUE)
# build labels per measure summarizing per-visit n/missing
lab_df <- tibble(measure = score_vars) |>
rowwise() |>
mutate(
n1 = sum(!is.na(df[[measure]] & df$visit == 1) & df$visit == 1, na.rm = TRUE),
n2 = sum(!is.na(df[[measure]] & df$visit == 2) & df$visit == 2, na.rm = TRUE),
miss1 = N_v1 - n1,
miss2 = N_v2 - n2,
label = paste0(measure, "\n(V1 n=", n1, ", miss=", miss1, " of N=", N_v1,
" | V2 n=", n2, ", miss=", miss2, " of N=", N_v2, ")")
) |>
ungroup()
long_scores <- df |>
select(visit, all_of(score_vars)) |>
pivot_longer(cols = all_of(score_vars), names_to = "measure", values_to = "value") |>
left_join(lab_df, by = "measure") |>
filter(!is.na(value))
print(
ggplot(long_scores, aes(x = factor(visit), y = value, fill = factor(visit))) +
geom_boxplot() +
facet_wrap(~ label, scales = "free_y", ncol = 3) +
labs(title = "Summary scores by visit",
subtitle = "Facet labels show per-visit n & missing",
x = "Visit", y = "Score") +
theme(legend.position = "none")
)
}
#| label: setup
#| message: false
#| warning: false
library(tidyverse)
library(naniar)
library(gtsummary)
library(ggdist) # For raincloud plots
#| label: load-data
df <- read_csv("df_final_long")
id_cols <- c("client_name", "gender", "date_of_first_visit", "date_of_last_visit", "digital_dss")
df <- df %>%
mutate(across(-all_of(id_cols), ~as.numeric(as.character(.x)) |> suppressWarnings() |> coalesce(.x)))
#| label: table-demographics
#| warning: false
df %>%
filter(visit == 1) %>%
select(age, gender, study_group) %>%
tbl_summary(by = study_group, label = list(age ~ "Age (years)", gender ~ "Gender"), missing_text = "Missing") %>%
add_overall() %>%
add_p() %>%
bold_labels()
#| label: table-scores
#| warning: false
total_score_vars <- c("phq9_total_score", "who_5_total_score", "moca_total_score", "dsst_total_score", "score_sage", "pp_dsst_st", "vf_phonemic_st", "vf_semantic_st")
df %>%
filter(visit == 1) %>%
select(all_of(total_score_vars), study_group) %>%
tbl_summary(by = study_group, missing_text = "Missing") %>%
add_overall() %>%
add_p() %>%
bold_labels()
#| label: plot-demographics-missingness
demographic_vars <- c("age", "gender", "study_group")
gg_miss_var(df %>% select(all_of(demographic_vars)), show_pct = TRUE) +
labs(title = "Missingness of Demographic Data")
#| label: plot-questionnaire-missingness
phq9_items <- c("little_interest_or_pleasure_in_doing_things", "feeling_down_depressed_or_hopeless", "trouble_falling_or_staying_asleep_or_sleeping_too_much", "feeling_tired_or_having_little_energy", "poor_appetite_or_overeating", "feeling_bad_about_yourself_g_or_that_you_are_a_failure_or_have_let_yourself_or_your_family_down", "trouble_concentrating_on_things_such_as_reading_the_newspaper_or_watching_television", "moving_or_speaking_so_slowly_that_other_people_could_have_noticed_or_the_opposite_g_being_so_fidgety_or_restless_that_you_have_been_moving_around_a_lot_more_than_usual", "thoughts_that_you_would_be_better_off_dead_or_of_hurting")
who5_items <- c("i_have_felt_cheerful_and_in_good_spirits", "i_have_felt_calm_and_relaxed", "i_have_felt_active_and_vigorous", "i_woke_up_feeling_fresh_and_rested", "my_daily_life_has_been_filled_with_things_that_interest_me")
gg_miss_upset(df %>% select(all_of(c(phq9_items, who5_items))), nsets = 10)
#| label: plot-phq9-items
#| results: 'asis'
#| warning: false
#| fig-width: 12
#| fig-height: 10
generate_item_plots <- function(variable_list) {
plot_data_with_counts <- df %>%
select(all_of(variable_list)) %>%
pivot_longer(cols = everything(), names_to = "variable", values_to = "value") %>%
filter(!is.na(value)) %>%
group_by(variable) %>%
mutate(n = n()) %>%
ungroup() %>%
mutate(variable_n_label = paste0(variable, "\n(n=", n, ")"))
hist_plot <- ggplot(plot_data_with_counts, aes(x = value)) +
geom_histogram(binwidth = 1, fill = "coral", color = "black") +
facet_wrap(~variable_n_label, scales = "free", ncol = 3) +
labs(title = "Distribution of Item Responses", x = "Response Value", y = "Frequency") +
theme_minimal()
box_plot <- ggplot(plot_data_with_counts, aes(y = value)) +
geom_boxplot() +
facet_wrap(~variable_n_label, scales = "free_y", ncol = 3) +
labs(title = "Outlier Detection for Item Responses", x = NULL, y = "Response Value") +
theme_minimal() +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
print(hist_plot)
print(box_plot)
}
generate_item_plots(phq9_items)
#| label: plot-who5-items
#| results: 'asis'
#| warning: false
#| fig-width: 12
#| fig-height: 8
generate_item_plots(who5_items)
#| label: plot-total-scores-raincloud
#| warning: false
#| fig-width: 14
#| fig-height: 10
# Calculate n for subtitles
n_counts <- df %>%
filter(!is.na(visit)) %>%
select(visit, all_of(total_score_vars)) %>%
pivot_longer(-visit, names_to = "variable", values_to = "value") %>%
filter(!is.na(value)) %>%
count(variable, visit)
df %>%
select(client_name, visit, all_of(total_score_vars)) %>%
pivot_longer(cols = -c(client_name, visit), names_to = "variable", values_to = "value") %>%
filter(!is.na(value), !is.na(visit)) %>%
ggplot(aes(x = factor(visit), y = value, fill = factor(visit))) +
ggdist::stat_halfeye(adjust = .5, width = .6, .width = 0, justification = -.3, point_colour = NA) +
geom_boxplot(width = .12, outlier.color = "red") +
geom_point(shape = 21, size = 1.5, alpha = .3, position = position_jitter(seed = 1, width = .08)) +
geom_text(data = n_counts, aes(label = paste("n =", n)), y = -Inf, vjust = -0.5, size = 3) +
facet_wrap(~variable, scales = "free_y", ncol = 4) +
labs(title = "Change in Summary Scores Between Visits", subtitle = "Distributions, boxplots, and raw data points for each score at each visit.", x = "Visit Number", y = "Score Value") +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(size = 10))
#| label: plot-spaghetti
#| warning: false
#| fig-width: 12
#| fig-height: 9
# Create a clean, long-format data frame with only complete pairs for plotting
df_pairs <- df %>%
select(client_name, visit, all_of(total_score_vars)) %>%
pivot_longer(-c(client_name, visit), names_to = "variable", values_to = "value") %>%
filter(!is.na(value)) %>%
group_by(client_name, variable) %>%
filter(n() == 2) %>%
ungroup()
# Calculate number of complete pairs for subtitle
n_pairs <- df_pairs %>%
distinct(client_name, variable) %>%
count(variable)
# Create the plot using the prepared 'df_pairs' data
ggplot(df_pairs, aes(x = factor(visit), y = value, group = client_name)) +
geom_line(alpha = 0.3, color = "gray") +
geom_point(alpha = 0.5) +
facet_wrap(~variable, scales = "free_y", ncol = 4) +
labs(
title = "Individual Participant Trajectories Between Visits (Spaghetti Plots)",
subtitle = "Each line represents one participant's change. The red line shows the group average.",
x = "Visit Number",
y = "Score Value"
) +
geom_text(data = n_pairs, aes(label = paste(n, "pairs"), group = NULL), x = 1.5, y = Inf, vjust = 1.5, size = 3) +
stat_summary(fun = "mean", geom = "point", shape = 23, size = 4, fill = "red", aes(group = 1)) +
stat_summary(fun = "mean", geom = "line", aes(group = 1), color = "red", linewidth = 1) +
theme_minimal()
#| label: minimal
#| message: false
#| warning: false
# Uses tidyverse + knitr. Reads exactly from your path: "df_final_long"
library(tidyverse)
library(knitr)
# -----------------------------
# Load
# -----------------------------
df <- read_csv("df_final_long", show_col_types = FALSE)
# Standardize key columns if named differently
if (!"visit" %in% names(df)) {
alt <- intersect(c("wave","timepoint"), names(df))[1]
if (!is.na(alt)) df <- df |> rename(visit = all_of(alt))
}
if (!"client_name" %in% names(df)) {
alt <- intersect(c("participant_id","id"), names(df))[1]
if (!is.na(alt)) df <- df |> rename(client_name = all_of(alt))
}
# Basic counts
n_obs <- nrow(df)
n_ids <- if ("client_name" %in% names(df)) n_distinct(df$client_name) else NA_integer_
n_v1  <- if ("visit" %in% names(df)) sum(df$visit == 1, na.rm = TRUE) else NA_integer_
n_v2  <- if ("visit" %in% names(df)) sum(df$visit == 2, na.rm = TRUE) else NA_integer_
cat("Rows:", n_obs, "| Participants:", n_ids,
if ("visit" %in% names(df)) paste0("| V1 rows:", n_v1, "| V2 rows:", n_v2) else "",
"\n\n")
# Small helpers
fmt_ms   <- function(x) sprintf("%.2f (%.2f)", mean(x, na.rm = TRUE), sd(x, na.rm = TRUE))
fmt_medI <- function(x) sprintf("%.2f [%.2f]", median(x, na.rm = TRUE), IQR(x, na.rm = TRUE))
n_nonmis <- function(x) sum(!is.na(x))
n_mis    <- function(x, N) N - n_nonmis(x)
# =====================================================================================
# TABLE 1 — Demographics (participant-level; do NOT split by visit)
# =====================================================================================
# Use the first row per participant if client_name exists; otherwise use raw df
demo_df <- df
if ("client_name" %in% names(df)) {
demo_df <- df |> arrange(client_name, visit) |> distinct(client_name, .keep_all = TRUE)
}
N_demo <- nrow(demo_df)
has_gender <- "gender" %in% names(demo_df)
has_group  <- "study_group" %in% names(demo_df)
has_age    <- "age" %in% names(demo_df)
cat("### Table 1. Demographics (participant-level; N =", N_demo, ")\n")
# 1A) Continuous: Age
if (has_age) {
age_tab <- tibble(
Variable = "Age (years)",
n = n_nonmis(demo_df$age),
missing = n_mis(demo_df$age, N_demo),
`Mean (SD)` = fmt_ms(demo_df$age),
`Median [IQR]` = fmt_medI(demo_df$age),
Min = suppressWarnings(min(demo_df$age, na.rm = TRUE)),
Max = suppressWarnings(max(demo_df$age, na.rm = TRUE))
)
age_tab |> kable(align = c("l","r","r","r","r","r","r"))
cat("\n")
}
# 1B) Categorical: Gender and Study Group (overall n (%), include Missing row)
if (has_gender) {
g_counts <- demo_df |>
mutate(gender = forcats::fct_explicit_na(as.factor(gender), na_level = "Missing")) |>
count(gender, name = "n") |>
mutate(`%` = round(100 * n / sum(n), 1)) |>
arrange(desc(n))
colnames(g_counts)[1] <- "Gender"
g_counts |> kable(align = c("l","r","r"))
cat("\n")
}
if (has_group) {
s_counts <- demo_df |>
mutate(study_group = forcats::fct_explicit_na(as.factor(study_group), na_level = "Missing")) |>
count(study_group, name = "n") |>
mutate(`%` = round(100 * n / sum(n), 1)) |>
arrange(desc(n))
colnames(s_counts)[1] <- "Study group"
s_counts |> kable(align = c("l","r","r"))
cat("\n")
}
# =====================================================================================
# TABLE 2 — Cognitive & Wellbeing Scores (Totals & Standardized), split by Visit
# =====================================================================================
if (!"visit" %in% names(df)) {
cat("### Table 2. Skipped (no 'visit' column found).\n\n")
} else {
candidate_totals <- c(
"phq9_total_score","who_5_total_score","moca_total_score",
"dsst_total_score","score_sage"
)
# standardized columns usually end with "_st" or "_std" or start with "z_"
std_vars_detected <- names(df)[grepl("(_st$)|(_std$)|(^z_)", names(df))]
std_common <- c("pp_dsst_st","vf_phonemic_st","vf_semantic_st")
std_vars <- intersect(union(std_vars_detected, std_common), names(df))
total_vars <- intersect(candidate_totals, names(df))
# simple per-visit summary, avoiding type-mixing
mk_visit_table <- function(vars, label) {
if (!length(vars)) return(NULL)
N_v1 <- sum(df$visit == 1, na.rm = TRUE)
N_v2 <- sum(df$visit == 2, na.rm = TRUE)
v1 <- df |> filter(visit == 1) |>
select(all_of(vars)) |>
pivot_longer(everything(), names_to = "Measure", values_to = "value") |>
group_by(Measure) |>
summarize(
`V1 n` = sum(!is.na(value)),
`V1 missing` = N_v1 - `V1 n`,
`V1 Mean (SD)` = fmt_ms(value),
`V1 Median [IQR]` = fmt_medI(value),
.groups = "drop"
)
v2 <- df |> filter(visit == 2) |>
select(all_of(vars)) |>
pivot_longer(everything(), names_to = "Measure", values_to = "value") |>
group_by(Measure) |>
summarize(
`V2 n` = sum(!is.na(value)),
`V2 missing` = N_v2 - `V2 n`,
`V2 Mean (SD)` = fmt_ms(value),
`V2 Median [IQR]` = fmt_medI(value),
.groups = "drop"
)
full_join(v1, v2, by = "Measure") |>
mutate(Type = label) |>
relocate(Type, Measure) |>
arrange(Measure)
}
# If no standardized columns exist, compute fallback z-scores for totals (overall mean/sd)
if (!length(std_vars) && length(total_vars)) {
z_long <- df |>
select(visit, all_of(total_vars)) |>
pivot_longer(cols = all_of(total_vars), names_to = "Measure", values_to = "value") |>
group_by(Measure) |>
mutate(z = (value - mean(value, na.rm = TRUE)) / sd(value, na.rm = TRUE)) |>
ungroup()
df_z <- z_long |>
select(visit, Measure, z) |>
pivot_wider(names_from = Measure, values_from = z)
names(df_z)[-1] <- paste0(total_vars, "_z")
std_vars <- names(df_z)[-1]
# bind visit with z columns for summarizing
df <- df |> select(visit) |> left_join(df_z, by = "visit")
}
tab_tot <- mk_visit_table(total_vars, "Total")
tab_std <- mk_visit_table(std_vars,  "Standardized")
tab2 <- bind_rows(tab_tot, tab_std)
if (!is.null(tab2) && nrow(tab2) > 0) {
cat("### Table 2. Cognitive & Wellbeing — Totals and Standardized by Visit\n")
tab2 |> kable()
cat("\n")
} else {
cat("No cognitive/wellbeing score columns found for Table 2.\n\n")
}
}
# =====================================================================================
# PLOTS — all with explicit n and missing
# =====================================================================================
# --- Demographics missingness (participant-level)
demo_vars <- intersect(c("age","gender","study_group"), names(demo_df))
if (length(demo_vars) > 0) {
miss_df <- demo_df |>
summarize(across(all_of(demo_vars), ~sum(is.na(.)), .names = "miss_{.col}")) |>
pivot_longer(everything(), names_to = "var", values_to = "missing") |>
mutate(variable = sub("^miss_", "", var),
N = N_demo,
pct = 100 * missing / N)
print(
ggplot(miss_df, aes(x = reorder(variable, -pct), y = pct)) +
geom_col() +
geom_text(aes(label = sprintf("%.1f%% (miss=%d of N=%d)", pct, missing, N)), vjust = -0.3) +
labs(title = "Demographics — Percent Missing",
subtitle = paste0("Participant-level (N=", N_demo, ")"),
x = NULL, y = "Percent") +
ylim(0, max(100, max(miss_df$pct, na.rm = TRUE) + 10))
)
}
# --- Age histogram (participant-level)
if ("age" %in% names(demo_df)) {
n_age <- sum(!is.na(demo_df$age))
miss_age <- N_demo - n_age
print(
demo_df |> filter(!is.na(age)) |>
ggplot(aes(age)) + geom_histogram(bins = 15) +
labs(title = "Age distribution",
subtitle = paste0("Participant-level: n=", n_age, ", missing=", miss_age, " (N=", N_demo, ")"),
x = "Age (years)", y = "Count")
)
}
# --- Gender bar (participant-level)
if ("gender" %in% names(demo_df)) {
n_gender <- sum(!is.na(demo_df$gender))
miss_gender <- N_demo - n_gender
print(
demo_df |> filter(!is.na(gender)) |>
ggplot(aes(x = gender)) + geom_bar() +
labs(title = "Gender distribution",
subtitle = paste0("Participant-level: n=", n_gender, ", missing=", miss_gender, " (N=", N_demo, ")"),
x = NULL, y = "Count")
)
}
# --- Summary scores by visit (boxplots) with facet labels carrying per-visit n/missing
score_vars <- intersect(c(
"phq9_total_score","who_5_total_score","moca_total_score",
"dsst_total_score","score_sage","pp_dsst_st","vf_phonemic_st","vf_semantic_st"
), names(df))
if (length(score_vars) > 0 && "visit" %in% names(df)) {
N_v1 <- sum(df$visit == 1, na.rm = TRUE)
N_v2 <- sum(df$visit == 2, na.rm = TRUE)
lab_df <- tibble(Measure = score_vars) |>
rowwise() |>
mutate(
n1 = sum(df$visit == 1 & !is.na(df[[Measure]])),
n2 = sum(df$visit == 2 & !is.na(df[[Measure]])),
miss1 = N_v1 - n1,
miss2 = N_v2 - n2,
label = paste0(Measure, "\n(V1 n=", n1, ", miss=", miss1, " of N=", N_v1,
" | V2 n=", n2, ", miss=", miss2, " of N=", N_v2, ")")
) |>
ungroup()
long_scores <- df |>
select(visit, all_of(score_vars)) |>
pivot_longer(cols = all_of(score_vars), names_to = "Measure", values_to = "value") |>
left_join(lab_df, by = "Measure") |>
filter(!is.na(value))
print(
ggplot(long_scores, aes(x = factor(visit), y = value, fill = factor(visit))) +
geom_boxplot() +
facet_wrap(~ label, scales = "free_y", ncol = 3) +
labs(title = "Summary scores by visit",
subtitle = "Facet labels show per-visit n & missing",
x = "Visit", y = "Score") +
theme(legend.position = "none")
)
}
#| echo: false
#| warning: false
library(readxl)
library(dplyr)
library(tidyr)
install.packages("rsconnect")
rsconnect::setAccountInfo(name='780-data-explorer', token='8B80A2ECBFEE2CBE5E4B75C008D95365', secret='hXclZl57IKRC3eBGxlj0w15FLgZKVoBw08Ld7H07')
library(shiny); runApp('Documents/780_data_explorer/app_enhanced_simple.R')
runApp('Documents/780_data_explorer/app_enhanced_simple.R')
